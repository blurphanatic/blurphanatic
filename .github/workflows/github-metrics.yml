name: GitHub Metrics

on:
  schedule:
    - cron: "0 0 * * *"  # daily at midnight UTC
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  github-metrics:
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: write
      issues: read
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install prerequisites
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Generate GitHub Metrics
        uses: lowlighter/metrics@v3.34
        with:
          token: ${{ secrets.METRICS_TOKEN }}
          user: blurphanatic
          template: classic
          base: header, activity, community, repositories, metadata
          base_indepth: true
          config_octicon: true
          config_timezone: Europe/London
          config_twemoji: true
          plugin_languages: true
          plugin_languages_analysis_timeout: 15
          plugin_languages_analysis_timeout_repositories: 7.5
          plugin_languages_categories: markup, programming
          plugin_languages_colors: github
          plugin_languages_indepth: true
          plugin_languages_limit: 8
          plugin_languages_other: true
          plugin_languages_recent_categories: markup, programming
          plugin_languages_recent_days: 30
          plugin_languages_recent_load: 300
          plugin_languages_sections: most-used
          plugin_languages_threshold: 0%
        env:
          GITHUB_TOKEN: ${{ secrets.METRICS_TOKEN }}

      - name: Ensure metrics directory exists
        run: mkdir -p metrics

      - name: Copy generated SVGs into metrics/
        run: |
          set -eux
          # Primary expected output location seen in logs
          SRC_DIR="/metrics_renders"

          # Copy from metrics_renders if present
          if [ -d "$SRC_DIR" ]; then
            if [ -f "$SRC_DIR/github-metrics.svg" ]; then
              cp "$SRC_DIR/github-metrics.svg" metrics/github-metrics.svg
            fi
            if [ -f "$SRC_DIR/top-langs.svg" ]; then
              cp "$SRC_DIR/top-langs.svg" metrics/top-langs.svg
            fi
          fi

          # Fallback if output landed in repository root
          if [ -f "github-metrics.svg" ]; then
            mv github-metrics.svg metrics/github-metrics.svg
          fi
          if [ -f "top-langs.svg" ]; then
            mv top-langs.svg metrics/top-langs.svg
          fi

      - name: Validate metrics SVGs presence
        run: |
          echo "Listing metrics directory contents:"
          ls -al metrics/
          if [ ! -f metrics/github-metrics.svg ]; then
            echo "ERROR: metrics/github-metrics.svg is missing. Generation likely failed."; exit 1
          fi
          if [ ! -f metrics/top-langs.svg ]; then
            echo "WARNING: metrics/top-langs.svg is missing (optional)."
          fi

      - name: Commit and push metrics with resilience
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Sync remote and rebase to avoid non-fast-forward
          git fetch origin main
          git checkout main
          git pull --rebase=interactive --autostash origin main || true

          # Only commit if there are changes under metrics/
          if git diff --quiet metrics/; then
            echo "No changes detected in metrics/; skipping commit."
            exit 0
          fi

          git add metrics/
          git commit -m "ðŸ“ˆ Update GitHub metrics [skip ci]"

          # Push with retries, fall back to force-with-lease on last attempt
          for attempt in 1 2 3; do
            if git push origin main; then
              echo "Push successful."
              exit 0
            fi
            echo "Push failed (attempt $attempt), fetching & rebasing then retrying..."
            git fetch origin main
            git rebase --autostash origin/main || {
              echo "Rebase failed or conflict; aborting rebase."
              git rebase --abort || true
            }
            sleep $((attempt * 2))
          done

          echo "Final push attempt with force-with-lease to avoid overwriting remote unexpectedly."
          git push --force-with-lease origin main
